package appchain

import (
	"bytes"
	"io/ioutil"
	"os"
	"testing"

	"github.com/meshplus/bitxhub-kit/log"

	"github.com/ethereum/go-ethereum/light"

	"github.com/ethereum/go-ethereum/rlp"
	"github.com/ethereum/go-ethereum/trie"

	"github.com/ethereum/go-ethereum/core/types"
	"github.com/stretchr/testify/require"
)

// block headers from infura api server
const (
	RinkebyHeader1 = "{\"parentHash\":\"0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177\",\"sha3Uncles\":\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\"miner\":\"0x0000000000000000000000000000000000000000\",\"stateRoot\":\"0x53580584816f617295ea26c0e17641e0120cab2f0a8ffb53a866fd53aa8e8c2d\",\"transactionsRoot\":\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\"receiptsRoot\":\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\"logsBloom\":\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"difficulty\":\"0x2\",\"number\":\"0x1\",\"gasLimit\":\"0x47c94c\",\"gasUsed\":\"0x0\",\"timestamp\":\"0x58ee45da\",\"extraData\":\"0xd783010600846765746887676f312e372e33856c696e757800000000000000009f1efa1efa72af138c915966c639544a0255e6288e188c22ce9168c10dbe46da3d88b4aa065930119fb886210bf01a084fde5d3bc48d8aa38bca92e4fcc5215100\",\"mixHash\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"nonce\":\"0x0000000000000000\",\"hash\":\"0xa7684ac44d48494670b2e0d9085b7750e7341620f0a271db146ed5e70c1db854\"}\n"
	RinkebyHeader2 = "{\"parentHash\":\"0xa7684ac44d48494670b2e0d9085b7750e7341620f0a271db146ed5e70c1db854\",\"sha3Uncles\":\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\"miner\":\"0x0000000000000000000000000000000000000000\",\"stateRoot\":\"0x53580584816f617295ea26c0e17641e0120cab2f0a8ffb53a866fd53aa8e8c2d\",\"transactionsRoot\":\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\"receiptsRoot\":\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\"logsBloom\":\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"difficulty\":\"0x2\",\"number\":\"0x2\",\"gasLimit\":\"0x47db3d\",\"gasUsed\":\"0x0\",\"timestamp\":\"0x58ee45ea\",\"extraData\":\"0xd783010600846765746887676f312e372e33856c696e75780000000000000000b5a4a624d2e19fdab62ff7f4d2f2b80dfab4c518761beb56c2319c4224dd156f698bb1a2750c7edf12d61c4022079622062039637f40fb817e2cce0f0a4dae9c01\",\"mixHash\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"nonce\":\"0x0000000000000000\",\"hash\":\"0x9b095b36c15eaf13044373aef8ee0bd3a382a5abb92e402afa44b8249c3a90e9\"}\n"
	RinkebyHeader3 = "{\"parentHash\":\"0x9b095b36c15eaf13044373aef8ee0bd3a382a5abb92e402afa44b8249c3a90e9\",\"sha3Uncles\":\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\"miner\":\"0x0000000000000000000000000000000000000000\",\"stateRoot\":\"0x53580584816f617295ea26c0e17641e0120cab2f0a8ffb53a866fd53aa8e8c2d\",\"transactionsRoot\":\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\"receiptsRoot\":\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\"logsBloom\":\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"difficulty\":\"0x2\",\"number\":\"0x3\",\"gasLimit\":\"0x47e7c4\",\"gasUsed\":\"0x0\",\"timestamp\":\"0x58ee45f9\",\"extraData\":\"0xd783010600846765746887676f312e372e33856c696e757800000000000000004e10f96536e45ceca7e34cc1bdda71db3f3bb029eb69afd28b57eb0202c0ec0859d383a99f63503c4df9ab6c1dc63bf6b9db77be952f47d86d2d7b208e77397301\",\"mixHash\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"nonce\":\"0x0000000000000000\",\"hash\":\"0x9eb9db9c3ec72918c7db73ae44e520139e95319c421ed6f9fc11fa8dd0cddc56\"}\n"

	RopstenHeader1 = "{\"parentHash\":\"0x0d37ff8f4a8f1adcfd16add9cf8726e17a8097baa9a50d3b5fd51849476f7ec3\",\"sha3Uncles\":\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\"miner\":\"0x033ef6db9fbd0ee60e2931906b987fe0280471a0\",\"stateRoot\":\"0xfc22ae06eb79345da19322573c740ccaf4e224e32c916226c0adf7223c881bc5\",\"transactionsRoot\":\"0x792fa9b9b95e586cd5757922f5f06adff5333bd5fb77059d95debcde4a4d5e0d\",\"receiptsRoot\":\"0x23f3951c0cede08fa61c20c77f36c8d7853d0f205f5053ee9a39f4cf68833546\",\"logsBloom\":\"0x00004000000000200000400000008000000010000000020000000000001004000000001000010000000000000000001040100000001000000010091010200000000000000000000000000008000004000000000000108400000100040000000000100000020000080000000020001880000200800000002000000010000018000000000240000000000000008000000000000020000000102020000000800000420004000000000000000000000020000000000000000014000200200000000000000102000000040000080000100000000060000000008000000200000020000010000000000000000000040000080004000000000000000000000000000000\",\"difficulty\":\"0x72ac658\",\"number\":\"0x9a3119\",\"gasLimit\":\"0x98cd34\",\"gasUsed\":\"0x1d58f8\",\"timestamp\":\"0x608506c2\",\"extraData\":\"0xd683010a01846765746886676f312e3136856c696e7578\",\"mixHash\":\"0xdbca2ed1c216550ef4d7f63d1c223da0530fc196f14960e70ac8f384cd0f8d63\",\"nonce\":\"0x2293d516a92c2912\",\"hash\":\"0x6a04391a825d6a5a7a247c6e5134f020abec8f8073b1eb1fc778bd9e1502b852\"}\n"
	RopstenHeader2 = "{\"parentHash\":\"0x6a04391a825d6a5a7a247c6e5134f020abec8f8073b1eb1fc778bd9e1502b852\",\"sha3Uncles\":\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\"miner\":\"0x773b556e7f3222f3b93d6519484cef0c443b9d7e\",\"stateRoot\":\"0xc45bd719ef83edd7f6afbaa7afb43a3422ef9ca0faf6853565dbd04671a0736f\",\"transactionsRoot\":\"0xf2a97635c98b8c96c6977e5e16418f9b480c0bd6f4922d15a34dffac2a2b23de\",\"receiptsRoot\":\"0x400c370ac70c3031022c8fd923fbff191f5dcfa6b4454e90ef8c5de8d9475af3\",\"logsBloom\":\"0xdifficulty\":\"0x72ac858\",\"number\":\"0x9a311a\",\"gasLimit\":\"0x98a702\",\"gasUsed\":\"0xd09e6\",\"timestamp\":\"0x608506cb\",\"extraData\":\"0xd683010a01846765746886676f312e3136856c696e7578\",\"mixHash\":\"0xc7d603705499308d968e7e4687325bc227fbe104d62f0bd53eeff154e2749223\",\"nonce\":\"0x3733ef9174a63f69\",\"hash\":\"0x91c4c53daae0fc7fec3310c2c60597349f84183322b1bdaec9faf9a602627151\"}\n"
)

func TestRinkebyLightClient(t *testing.T) {
	repoRoot, err := ioutil.TempDir("", "TestRinkebyLightClient")
	require.Nil(t, err)
	defer os.RemoveAll(repoRoot)

	oracle, err := NewRinkebyOracle(repoRoot, log.NewWithModule("test"))
	require.Nil(t, err)

	header1 := types.Header{}
	err = header1.UnmarshalJSON([]byte(RinkebyHeader1))
	require.Nil(t, err)

	header2 := types.Header{}
	err = header2.UnmarshalJSON([]byte(RinkebyHeader2))
	require.Nil(t, err)

	header3 := types.Header{}
	err = header3.UnmarshalJSON([]byte(RinkebyHeader3))
	require.Nil(t, err)

	num, err := oracle.InsertBlockHeaders([]*types.Header{&header1, &header2})
	require.Nil(t, err)
	require.Equal(t, num, 0)

}

func TestRopstenLightClient(t *testing.T) {
	repoRoot, err := ioutil.TempDir("", "TestRopstenLightClient")
	require.Nil(t, err)
	defer os.RemoveAll(repoRoot)

	oracle, err := NewRopstenOracle(repoRoot, log.NewWithModule("test"))
	require.Nil(t, err)

	currentHeader := oracle.CurrentHeader()

	header1 := &types.Header{}
	err = header1.UnmarshalJSON([]byte(RopstenHeader1))
	require.Nil(t, err)
	require.Equal(t, currentHeader.Number.Uint64(), header1.Number.Uint64()-1)

	header2 := &types.Header{}
	err = header2.UnmarshalJSON([]byte(RopstenHeader2))
	require.Nil(t, err)
	require.Equal(t, currentHeader.Number.Uint64(), header2.Number.Uint64()-2)

	num, err := oracle.InsertBlockHeaders([]*types.Header{header1, header2})
	require.Nil(t, err)
	require.Equal(t, 0, num)

}

func TestVerifyProof(t *testing.T) {
	repoRoot, err := ioutil.TempDir("", "TestRopstenLightClient")
	require.Nil(t, err)
	defer os.RemoveAll(repoRoot)

	var (
		receipt0 = "{\"root\":\"0x\",\"status\":\"0x1\",\"cumulativeGasUsed\":\"0x11336\",\"logsBloom\":\"0xlogs\":[{\"address\":\"0x7a9a60a43edd1d885f9e672dd498c829b101dd07\",\"topics\":[\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\"0x0000000000000000000000002266463a8b23ddfc606670a06b0ce2e66011f1bf\",\"0x0000000000000000000000000de52d48482bf7f8a4c94bfdbdedd2319e99e92f\"],\"data\":\"0x00000000000000000000000000000000000000000000043c33c1937564800000\",\"blockNumber\":\"0x9a3118\",\"transactionHash\":\"0xba4d94730e0e76992538f19597cc41669d154c103b2ad77fb53ce18c4c0fc3cd\",\"transactionIndex\":\"0x0\",\"blockHash\":\"0x0d37ff8f4a8f1adcfd16add9cf8726e17a8097baa9a50d3b5fd51849476f7ec3\",\"logIndex\":\"0x0\",\"removed\":false},{\"address\":\"0x7a9a60a43edd1d885f9e672dd498c829b101dd07\",\"topics\":[\"0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\",\"0x0000000000000000000000002266463a8b23ddfc606670a06b0ce2e66011f1bf\",\"0x0000000000000000000000000de52d48482bf7f8a4c94bfdbdedd2319e99e92f\"],\"data\":\"0xfffffffffffffffffffffffffffffffffffffffffffffbc3cc3e6c8a9b7fffff\",\"blockNumber\":\"0x9a3118\",\"transactionHash\":\"0xba4d94730e0e76992538f19597cc41669d154c103b2ad77fb53ce18c4c0fc3cd\",\"transactionIndex\":\"0x0\",\"blockHash\":\"0x0d37ff8f4a8f1adcfd16add9cf8726e17a8097baa9a50d3b5fd51849476f7ec3\",\"logIndex\":\"0x1\",\"removed\":false}],\"transactionHash\":\"0xba4d94730e0e76992538f19597cc41669d154c103b2ad77fb53ce18c4c0fc3cd\",\"contractAddress\":\"0x0000000000000000000000000000000000000000\",\"gasUsed\":\"0x11336\",\"blockHash\":\"0x0d37ff8f4a8f1adcfd16add9cf8726e17a8097baa9a50d3b5fd51849476f7ec3\",\"blockNumber\":\"0x9a3118\",\"transactionIndex\":\"0x0\"}\n"
		receipt1 = "{\"root\":\"0x\",\"status\":\"0x1\",\"cumulativeGasUsed\":\"0x1653e\",\"logsBloom\":\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"logs\":[],\"transactionHash\":\"0xcb158ce1be4b6648dcdc69dedbe7ddda8e3aa284db7dacdb5b22401e9a454845\",\"contractAddress\":\"0x0000000000000000000000000000000000000000\",\"gasUsed\":\"0x5208\",\"blockHash\":\"0x0d37ff8f4a8f1adcfd16add9cf8726e17a8097baa9a50d3b5fd51849476f7ec3\",\"blockNumber\":\"0x9a3118\",\"transactionIndex\":\"0x1\"}\n"
		receipt2 = "{\"root\":\"0x\",\"status\":\"0x1\",\"cumulativeGasUsed\":\"0x2fd96\",\"logsBloom\":\"0xlogs\":[{\"address\":\"0x2d80502854fc7304c3e3457084de549f5016b73f\",\"topics\":[\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\"0x0000000000000000000000004183d62963434056e75e9854bc4ba92aa43a2d08\",\"0x000000000000000000000000dc914190feeb16d6f7c5d9a22826d515be5c5857\"],\"data\":\"0x00000000000000000000000000000000000000000000000000000000000b4cc6\",\"blockNumber\":\"0x9a3118\",\"transactionHash\":\"0x37fc9bf0e945443c862efe5405d9a179dced048c3baed58751f00d84ba64701c\",\"transactionIndex\":\"0x2\",\"blockHash\":\"0x0d37ff8f4a8f1adcfd16add9cf8726e17a8097baa9a50d3b5fd51849476f7ec3\",\"logIndex\":\"0x2\",\"removed\":false},{\"address\":\"0x0d9c8723b343a8368bebe0b5e89273ff8d712e3c\",\"topics\":[\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\"0x000000000000000000000000dc914190feeb16d6f7c5d9a22826d515be5c5857\",\"0x0000000000000000000000004183d62963434056e75e9854bc4ba92aa43a2d08\"],\"data\":\"0x0000000000000000000000000000000000000000000000000000000015ee0375\",\"blockNumber\":\"0x9a3118\",\"transactionHash\":\"0x37fc9bf0e945443c862efe5405d9a179dced048c3baed58751f00d84ba64701c\",\"transactionIndex\":\"0x2\",\"blockHash\":\"0x0d37ff8f4a8f1adcfd16add9cf8726e17a8097baa9a50d3b5fd51849476f7ec3\",\"logIndex\":\"0x3\",\"removed\":false},{\"address\":\"0xdc914190feeb16d6f7c5d9a22826d515be5c5857\",\"topics\":[\"0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1\"],\"data\":\"0x00000000000000000000000000000000000000000000000000001a4f9e78bc5e0000000000000000000000000000000000000000000000000000000d8457df78\",\"blockNumber\":\"0x9a3118\",\"transactionHash\":\"0x37fc9bf0e945443c862efe5405d9a179dced048c3baed58751f00d84ba64701c\",\"transactionIndex\":\"0x2\",\"blockHash\":\"0x0d37ff8f4a8f1adcfd16add9cf8726e17a8097baa9a50d3b5fd51849476f7ec3\",\"logIndex\":\"0x4\",\"removed\":false},{\"address\":\"0xdc914190feeb16d6f7c5d9a22826d515be5c5857\",\"topics\":[\"0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822\",\"0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d\",\"0x0000000000000000000000004183d62963434056e75e9854bc4ba92aa43a2d08\"],\"data\":\"0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4cc60000000000000000000000000000000000000000000000000000000015ee03750000000000000000000000000000000000000000000000000000000000000000\",\"blockNumber\":\"0x9a3118\",\"transactionHash\":\"0x37fc9bf0e945443c862efe5405d9a179dced048c3baed58751f00d84ba64701c\",\"transactionIndex\":\"0x2\",\"blockHash\":\"0x0d37ff8f4a8f1adcfd16add9cf8726e17a8097baa9a50d3b5fd51849476f7ec3\",\"logIndex\":\"0x5\",\"removed\":false}],\"transactionHash\":\"0x37fc9bf0e945443c862efe5405d9a179dced048c3baed58751f00d84ba64701c\",\"contractAddress\":\"0x0000000000000000000000000000000000000000\",\"gasUsed\":\"0x19858\",\"blockHash\":\"0x0d37ff8f4a8f1adcfd16add9cf8726e17a8097baa9a50d3b5fd51849476f7ec3\",\"blockNumber\":\"0x9a3118\",\"transactionIndex\":\"0x2\"}\n"
	)
	receiptList := []string{receipt0, receipt1, receipt2}
	oracle, err := NewRopstenOracle(repoRoot, log.NewWithModule("test"))
	require.Nil(t, err)

	receipts := make([]*types.Receipt, 0, len(receiptList))
	for _, r := range receiptList {
		var receipt types.Receipt
		err := receipt.UnmarshalJSON([]byte(r))
		require.Nil(t, err)
		receipts = append(receipts, &receipt)
	}
	tReceipts := types.Receipts(receipts)

	keybuf := new(bytes.Buffer)
	receiptsTrie := new(trie.Trie)
	index := uint64(2)
	header := oracle.lc.GetHeaderByHash(receipts[index].BlockHash)

	deriveSha := types.DeriveSha(tReceipts, receiptsTrie)
	require.Equal(t, header.ReceiptHash, deriveSha)

	err = rlp.Encode(keybuf, index)
	require.Nil(t, err)
	nodeSet := light.NewNodeSet()
	err = receiptsTrie.Prove(keybuf.Bytes(), 0, nodeSet)
	require.Nil(t, err)

	proof, err := rlp.EncodeToBytes(nodeSet.NodeList())
	require.Nil(t, err)

	err = VerifyProof(receipts[index], header, proof)
	require.Nil(t, err)
}
